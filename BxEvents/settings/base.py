# encoding: utf-8
"""
Django settings for BxEvents project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/


ALLOWED_HOSTS = []


# Application definition

CORE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'import_export',
    'constance',
    'constance.backends.database',
]

PROJECT_APPS = [
    'events.apps.EventsConfig',
    'employees.apps.EmployeesConfig',
    'notifications.apps.NotificationsConfig',
    'devices.apps.DevicesConfig',
    'participants.apps.ParticipantsConfig',
    'ideas.apps.IdeasConfig',
    'reports.apps.ReportsConfig',
]

INSTALLED_APPS = CORE_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BxEvents.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BxEvents.wsgi.application'

# Constance
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_CONFIG = {
    'TEAM_MIN_SIZE': (5, 'Mininum number of team members.', int),
    'TEAM_MAX_SIZE': (8, 'Maximum number of team members.', int),
    'PARTICIPANT_REGISTERED': ('El participante ya está registrado',
                               'Participant already registered', str),
    'IDEA_DELETED': ('Idea eliminada', 'Idea deletion message', str),
    'IDEA_EDIT_RESTRICTION': ('No puedes editar o borrar esta idea',
                              'Idea edit or delete restriction', str),
    'IDEA_EXISTS': ('Esta idea ya existe', 'Idea already exists', str),
    'CANDIDATE_ALREADY': ('Ya se registró como candidato',
                          'User already register as a candidate', str),
    'PARTICIPANT_IDEA_RESTRICTION': ('Ya se registro en una idea para este evento.',
                                     'Restriction message to avoid multiple registers for ideas in same event', str),
    'TEAM_MAX_SIZE_MESSAGE': ('Se alcanzó el número máximo de participantes por idea o ya está completo.',
                              'Team max size reached', str),
    'TEAM_MIN_SIZE_MESSAGE': ('No se tiene el número mínimo de integrantes.',
                              'Team min size not reached', str),
    'NOT_IDEA_OWNER': ('No eres el autor de la idea.', 'Not owner idea message', str),
    'USER_VOTED': ('Ya has registrado previamente tu voto', 'Message to user who already voted', str),
    'IDEA_EVALUATED': ('Esta idea ya fue evaluada en esta categoría',
                       'Message to jury who already evaluate this idea in this category', str)
}

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {}
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Djangorestframework settings

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 30
}

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Lima'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

# USER MODEL
AUTH_USER_MODEL = "participants.User"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Push notifications
FIREBASE_API_URL = 'https://fcm.googleapis.com/fcm/send'
TITLE_PUSH_NOTIFICATIONS = 'BELATRIX Events'

# Email
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
